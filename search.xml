<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[hexo的next主题详细配置]]></title>
    <url>%2F2019%2F02%2F23%2Fhexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E8%AF%A6%E7%BB%86%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[如何更换hexo博客主题]]></title>
    <url>%2F2019%2F02%2F23%2F%E5%A6%82%E4%BD%95%E6%9B%B4%E6%8D%A2hexo%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%2F</url>
    <content type="text"><![CDATA[在成功用github+hexo搭建好个人博客之后，原生的主题一般不大讨喜。在此，简单介绍一下如何找一个自己喜欢的主题并运用到自己的博客中： 挑个好看的主题hexo官方：Themes 知乎话题：有哪些好看的 Hexo 主题？ 下载用git bash，进入到博客的本地目录中 然后使用clone的方法将想要的主题下载下来。（我选用的是NexT主题） 1$ git clone https://github.com/theme-next/hexo-theme-next themes/next 修改配置文件，安装git克隆完成后，打开当前目录下的“_config.yml”配置文件。 找到theme的配置选项，一般在文件的最后。之后，将theme选项配置为我们新下载好的next主题即可。（“：”冒号之后空格不可少） 调试，发布回到git bash，输入调试命令： 1hexo server --debug 在浏览器中输入localhost:4000查看 在本地查看无误之后，输入生成和发布命令,就可已将新主题发布到自己的博客网站上了 12hexo ghexo d 如出现缓存引起的异常，可以在生成命令前执行清除缓存命令 1hexo clean 完成做完这些之后，就可以打开你的博客网站，查看新更换的主题效果了。]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>hexo更换主题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用hexo+github搭建属于自己的博客]]></title>
    <url>%2F2019%2F02%2F23%2F%E4%BD%BF%E7%94%A8hexo-github%E6%90%AD%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[一、注册GitHub账号（已经有GitHub账号的请忽略这一步）先在Github注册一个账号:https://github.com/ 新建项目，项目必须要遵守格式：账户名.github.io，不然接下来会有很多麻烦。并且需要勾选Initialize this repository with a README 在建好的项目右侧有个settings按钮，点击它，向下拉到GitHub Pages，你会看到那边有个网址，访问它，你将会发现该项目已经被部署到网络上，能够通过外网来访问它。 二.环境搭建下载Node.js安装文件现在电脑基本都是64位的，我就放64位的下载地址：https://nodejs.org/dist/v8.9.4/node-v8.9.4-x64.msi 或者自行到官网下载最新版本： https://nodejs.org 安装Git：Git下载包（64位） Git下载包（32位） 完成之后到桌面空白处单击鼠标右键，选择Git Bash Here进入bash窗口输入命令 node -v 和 npm -v 验证安装是否成功,成功界面如下 三、Hexo安装Hexo简介Hexo是什么呢？也许引用Hexo官方文档里面的说明是再好不过了： 1Hexo is a fast, simple and powerful blog framework. You write posts in Markdown (or other languages) and Hexo generates static files with a beautiful theme in seconds. 1Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 安装Git下载地址：https://git-scm.com/download，按照默认傻瓜式安装就好了 补充一句，如果你已经安装了Git，你可以通过Git本身获得最新的开发版本： 1$ git clone https://github.com/git/git 完成之后到桌面空白处单击鼠标右键，如果有出现Git Bash Here选项则证明已经安装成功 下载Hexo在桌面空白处单击鼠标右键，选择Git Bash Here进入bash窗口，在自己认为合适的地方创个文件夹，我是在D盘建了一个blog文件夹。然后通过命令行进入到该文件夹里面 再输入命令 npm install -g hexo 下载Hexo 1$ npm install -g hexo 等待完成之后，输入命令 hexo -v 验证安装是否成功 初始化输入hexo init，初始化该文件夹 输入npm install，安装所需要的组件 输入hexo g，首次体验Hexo 输入hexo s，开启服务器，访问该网址，正式体验Hexo 问题：假如页面一直无法跳转，那么可能4000端口被占用了。此时我们ctrl+c停止服务器，接着输入hexo server -p 端口号来改变端口号 那么出现如下图就成功了 四、将Hexo与Github page联系起来安装插件打开git bash，进入hexo根文件夹，输入npm install hexo-deployer-git --save 命令安装插件 配置SSH设置全局配置user.name 和user.email（如果是第一次的话） 12git config –-global user.name “shuaibi” //(“”的账号是刚才Github里面自己注册的账号) git config –-global user.email “okjbk.gmail.com” //(""的邮箱是你自己注册的邮箱) 输入cd ~/.ssh，检查是否有.ssh的文件夹 输入ssh-keygen -t rsa -C &quot;ojbk.gmail.com&quot;(&quot;&quot;中间写你直接设置的邮箱)，连续三个回车，生成密钥，最后得到了两个文件：id_rsa和id_rsa.pub（默认存储路径是：C:\Users\Administrator.ssh）。 输入eval &quot;$(ssh-agent -s)&quot;，添加密钥到ssh-agent 再输入ssh-add ~/.ssh/id_rsa，添加生成的SSH key到ssh-agent 登录Github，点击头像下的settings，添加ssh 新建一个new ssh key，将id_rsa.pub文件里的内容复制上去 回到git bash 输入ssh -T git@github.com，测试添加ssh是否成功。如果看到Hi后面是你的用户名，就说明成功了 问题: 假如ssh-key配置失败，那么只要以下步骤就能完全解决 首先，清除所有的key-pairssh-add -Drm -r ~/.ssh删除你在github中的public-key 重新生成ssh密钥对ssh-keygen -t rsa -C “xxx@xxx.com“ 接下来正常操作在github上添加公钥public-key:1、首先在你的终端运行 xclip -sel c ~/.ssh/id_rsa.pub将公钥内容复制到剪切板2、在github上添加公钥时，直接复制即可3、保存 测试： 在终端 ssh -T git@github.com 配置配置Deployment，在根文件夹中，找到_config.yml文件，修改repo值（在末尾） 1234deploy: type: git repository: git@github.com:RobotNo42/RobotNo42.github.io.git branch: master repo值是你在github项目里的ssh（右下角） 部署用git bash部署hexo到github hexo server 或者 hexo s hexo generate 或者 hexo g hexo deploy 或者 hexo d 看到这样的进程，代表成功部署hexo到github 等待10分钟左右，打开用户名.github.io,会出现如下界面（代表成功搭建博客）：]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>hexo+github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LINUX命令三]]></title>
    <url>%2F2019%2F02%2F23%2FLINUX%E5%91%BD%E4%BB%A4%E4%B8%89%2F</url>
    <content type="text"><![CDATA[网络相关配置ifconfig 查看ip信息 远程复制 scp /etc/h.txt 192.168.1.1:/tmp 配置ssh（之后访问无需密码）： ssh-keygen ssh-copy-id -i 192.168.1.16 赋值变量 x=2 调用x echo $x 取消变量 unset x 设置别名 alias x=‘ls /’ 将命令得到的结果赋值到变量 x=$(ls) 搜索文件 ls [a-z][0-9].txt []代表在中间取一个值, a-z代表aAbBcC…..z不包含Z ls [!0-9],txt 查找不以数字开头的文件 执行历史命令 ！638 查看上条命令执行是否成功 echo $? 成功则为0 注释 || 前面命令成功，则后面不执行 ；只有前面命令失败后面才执行 &amp;&amp; 只有前面的命令执行成功才会执行后面的命令 \ 转义符号 ? 匹配一个任意字符 例： ls ???.txt 固化命令：在登录时就加载出命令 在/etc/bashrc 文件中添加想要的命令 #### grep命令grep -A 2 ‘fuck’ /etc/passwd 显示查询结果及后两行 grep -B 2 ‘fuck’ /etc/passwd 显示查询结果及前两行 grep -C 2 ‘fuck’ /etc/passwd 显示查询结果及前后两行 grep -c ‘fuck’ /etc/passwd 显示查询行数 grep -i ‘fuck’ /etc/passwd 无视大小写查询 grep -v ‘fuck’ /etc/passwd 取目标之外的剩余结果 grep -w ‘fuck’ /etc/passwd 单词匹配 grep -rl ‘fuck’ /etc/passwd 匹配文件内容中带fuck的文件路径 正则grep ‘^root’ 匹配以root开头的grep ‘root$’ 匹配以root结尾的 grep ‘a.b’ .代表任意一个字符 grep ‘ab‘ 代表b有0个或者多个 grep ‘ab?’ 代表b有0个或者1个 egrep ‘ab+’ 必须用egrep +代表b有1个或者多个 egrep ‘ab{2}’ 2个b egrep ‘ab{2，4}’ 2到4个b egrep ‘ab{2，}’ 2个以上b egrep ‘[abc\ / -]’ 含abc/-中一个字符的 [a-z] 代表所有的小写字母 [A-Z] 代表所有的大写字母 [a-Z] 代表所有的大小写字母 注意点如果要匹配的是-本身，则必须放到最后[asd-] echo ^[^0-9] 匹配不是数字开头的 sed命令sed ‘3d’ 删除第三行sed ‘1,4d’ 删除1-4行 sed ‘1;4d’ 删除第1行和第4行 sed ‘s/sb/fuck’ 把所有行的第一个sb换成fuck sed ‘s/sb/fuck/g’ 把所有行的所有sb换成fuck sed ‘3p’ 打印第三行 sed ‘3c 123456’ 把第三行改成123456 sed ‘3a 123’ 在第三行后插入123 sed ‘3i 123’ 在第三行前插入123 sed’/^root/d’ 加入正则法 sed -r ‘/^[0-9][a-Z]+sb$/ s/sb/SB/g’ r为扩展模式 sed -ri 多加一个i则是直接将文件内容改掉，而不是仅仅输入到终端 sed -r ‘s/^([a-Z]+)([^a-Z])([a-Z]+)([^a-Z])/\3\2\1\4/‘ 将第一个单词和第三个单词换位置 sed -r ‘s/ //g’ 将所有的空格去掉 sed -r ‘s/[0-9]//g’ 将所有的数字去掉 awk文本处理awk -F: ‘{print $1,$7}’ 打印以：为分隔符取第1段和第7段 (:后面加空格) awk -F: ‘{print $1,$NF}’ 打印以：为分隔符取第1段和最后一段 awk -F: ‘NR&lt;=3{print $1,NR}’ 打印前三行的第一段 awk -F: ‘NR&lt;=3{print NR,”—–”,$1}’ 打印出前三段 1——root 的样式 awk -F: ‘/log$/{print $1}’ 匹配有log的行，打印第1段 awk -F: ‘$1~/^r.*t$/{print $3}’ 匹配第一段中以r开头t结尾的行，并打印出这些行的第三段 awk -F: ‘$1==”root”{print $3,NR}’ 匹配第一段是root的行，并打印出这些行的第三段和行号 awk -v x=$count -F: ‘$3&gt;=x{print NR,$1}’ 匹配第三段大于参数x的行，打印行号和第一段 其他命令cat a.txt |sort |uniq 排序 去重 du -sh 统计文件大小 find /file -name “*.txt” 查找file文件夹中以txt结尾的文件 find /file -size +30M 查找file文件夹中大于30M的文件 find /file -size +10M -30M 查找file文件夹中大于10M小于30M的文件 变量linux 没有数据类型之分 set 显示所有变量 env 显示环境变量 变量关系操作test [] 括号里前后要空格 测试数值[ $x -gt $y ] 判断x的值大于y [ $x -ge $y ] 判断x大于等于y [ $x -lt $y ] 判断x小于y [ $x -le $y ] 判断x小于等于y [ $x -eq $y ] 判断x等于y [ $x -ne $y ] 判断x不等于y [ $x -gt $y -a $a -eq $b ] 判断x大于y并且a等于b [ $x -gt $y -o $a -eq $b ] 判断x大于y或者a等于b 测试文件状态-d 目录 -f 普通文件- -w 可写 -r 可读 -x 可执行 3.字符串测试 = 两字符串相等 != 两字符串不相等 -z 空串 -n 非空串 赋值运算符 ((x=x+1)) ——–((x+=1)) echo $((x-=2)) expr $x + $y echo “scale=2;20/100” | bc -l 保留两位小数 bc要先安装]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux命令</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LINUX命令二]]></title>
    <url>%2F2019%2F02%2F22%2FLINUX%E5%91%BD%E4%BB%A4%E4%BA%8C%2F</url>
    <content type="text"><![CDATA[打包压缩打包命令 tar -cvf /test.tar /a.txt /b.txt /c.txt 查看包内的内容 tar -tf /test.tar 解压包到当前目录 tar -xvf /test.tar 解压包到指定目录 tar -xvf /test.tar -C /try 压缩文件 gzip /test.tar (压缩快但大) 或者bzip2 /test.tar （压缩慢但小） 解压文件 tar -xf /test.tar.zp tar-xf /test.tar.bz2 打包并同时压缩文件tar -cvzf /test.tar.zp /a.txt /b.txt /c.txt 或 tar -cvjf /test.tar.bz2 /a.txt /b.txt /c.txt 如果要连同目录一起压缩则最后用/ 如果只想压缩目录下面的文件则/* vi查看并编辑文档 vim 按a 编辑 按 :wq 保存并退出 q！不保存 x 小写的x表示向后删除一个字符,也就是删除光标所在字符 nx n表示数字，表示向后删除每个字符，例如：10x表示删除包括光标在内的后面10个字符 dd 删除当前一行 ,就是截切 ndd删除n行（例如3dd删除3行） yy复制一行 nyy复制n行 p 粘贴到目标位置的下一行 P 粘贴到目标位置的上一行 u 撤销上一步操作 ctrl+r 返回前一步 gg 光标移动到文件的第一行 G 光标移动到文件的最后一行 nG 光标移动到文件的第n行 dgg 删除光标所在行到第一行数据 dG 删除光标所在行到最后一行数据 磁盘分区/dev fdisk -l /dev/sda 查看磁盘信息 fdisk /dev/sdb 进入磁盘分区 p 输出目前磁盘分区信息 n 分区 分为p主分区 e扩展分区 d 删除分区 给分区装装指定系统 mkfs.xfs /dev/sdb1 挂载一个目录 mount /dev/sdb1 /test 卸除挂载目录 umount /dev/sdb1 一个分区挂载两个目录时，则两个目录同时指向该分区，即同步 df 查看磁盘分区信息 df-Th 创建软链接（相当于创建快捷方式）ln -s /test/a.txt /sb/a.txt 前面是被创建的软连接 内存查看内存信息 swapon -s 增加内存区 mkswap /dev/sdb2 swapon -a /dev/sdb2 删除内存区swapoff /dev/sdb2 查看内存 free 进程firefox &amp; 后台运行程序 ps aux 查看全部进程 ps aux|grep fire 查找带fire的进程 pgrep firefox 查找firefox进程号 kill -9 3315 强制杀死进程(3315代表进程编号) pkill -9 firefox 指定名称的杀死进程 软件安装二进制软件安装 rpm -ivh /vsf-3.0.2-9.e17.x86_64.rpm覆盖安装 rpm -ivh /vsf-3.0.2-9.e17.x86_64.rpm –force 查看系统中所有安装的rpm包 rpm -qa 查看指定的包 rpm -qa|grep vsf 查看rpm包安装在哪 rpm -ql vsf 查看rmp包详细信息 rpm -qi vsf 查看文件是由那个包产生 rpm -qf /test/b1.txt 删除rmp包 rmp -e vsf 使用yum安装和卸载软件，有个前提是yum安装的软件包都是rpm格式的 yum update 升级系统 yum install ～ 安装指定软件包 yum update ～ 升级指定软件包 yum remove ～ 卸载指定软件 yum grouplist 查看系统中已经安装的和可用的软件组，可用的可以安装 yum grooupinstall ～安装上一个命令显示的可用的软件组中的一个 源代码安装python安装 python官网下载file源代码 安装环境 查看group列表 yum grouplist 安装组包 yum groupinstall ‘开发工具’ -y 解压文件 tar -xvf pytho-3.7.0.tgz cd到解压好的文件目录，更改源码包安装路径 ./configure –prefix=/usr/local/python3.7 编码 make 安装 make install（安装时会出现下面两种错误 1. 需要安装zlib包 yum install zlib* 2.ModuleNotFoundError: No module named ‘_ctypes’ 解决方法：3.7版本需要一个新的包libffi-devel，安装此包之后再次进行编译安装即可 yum install libffi-* 把python3.7加到path环境中 更改profile文件 vim /etc/profile 在文件的最后面加上 PATH=$PATH:/usr/local/python3.7/bin export PATH netstat -tunapl 查看网络状态]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux命令</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LINUX命令一]]></title>
    <url>%2F2019%2F02%2F22%2FLINUX%E5%91%BD%E4%BB%A4%E4%B8%80%2F</url>
    <content type="text"><![CDATA[快捷键：ctrl+c 取消命令 ctrl+l 清屏 命令：更换用户 su - 或sudo su 关机 init 0 重启 init 6 立即关机 shutdown -h now 查询当前用户 who am i 查看当前日期 date 修改当前日期 date -s “2012-01-02 14:00:00”（必须切换到root用户） 查看今天日历 cal 查看某天 cal 日月年（cal 3 4 2012） 改密码 passwd 查看文件下的子文件 ls 查看文件夹下的子文件详细信息 ls -l (简写ll) 查看文件的详细信息 ls -dl(简写ll -d) 查看文件夹下的所有文件包括隐藏文件 ls-a 切换目录 cd 退到上级目录 cd ,, 返回到上一次的目录 cd - 查看当前目录 pwd 递归建文件夹 mkdir -p 改名/移动 mv /a/b1 /a/b2(把a文件下的b1改成b2) mv /a/b1 /z/(把b1移动到z文件下) 文件复制顺便改名 cp /a/b1 /a/b2 文件夹的复制 cp -rf /a/b /c 删除文件夹 rm 删除文件夹下的所有子文件 rm -rf (不建议使用，最好用mv /a /tmp/ 移动到临时文件，还可以还原） ,如果文件带特殊符号，则加上“”即可删除 创建文件 touch a.txt 查看内容 cat 百分比查看 more 分页查看 less 查看前三行 head - n3 查看后三行 tail -n3 监控文件 tail -f 覆盖内容 echo 内容 &gt; 新增内容 echo 内容 &gt;&gt; 查看历史命令 history 使用第57行的历史命令 !57 直接修改密码 echo 123456 | passwd –stdin Messiless 用户信息文件 /etc/passwd 用户密码文件 /etc/shadow 用户组 /etc/group 用户组密码 /etc/gshadow 创建hsy用户 useradd hsy 完全删除hsy用户 userdel -r hsy 第一段代表文件权限信息，第一个数字是-代表普通文件，d则是目录 ，后面的一堆分3个3个来看，rwx代表属主的权限（可读可执行可写） r-x代表属组的权限（可读可执行） r-x代表其他用户的权限（可读可执行） 在jack组中附加一个tom用户 usermod -G jack tom 手动创建一个用户的流程 /etc/passwd /etc/shadow /etc/group /etc/gshaow mkdir /home/hsy cp -r /etc/skel/.[!.]* /home/hsy chown -R hsy.hsy /home/hsy touch /var/spool/mail/hsy chown -R hsy.mail /var/spool/mail/hsy 更换文件权限： 方法一：chmod u=rw,g=r,o=rx /a.txt 方法二：chmod 744 /a.txt (r=4,w=2,x=1) 如果要在一个目录下创建删除重命名文件，则该用户需要同时有wx权限 如果要修改一个目录下文件的内容，则需要文件的w权限，和前面目录的x权限]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux命令</tag>
      </tags>
  </entry>
</search>
